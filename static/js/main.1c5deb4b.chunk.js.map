{"version":3,"sources":["spotify.js","Login.js","SidebarOption.js","DataLayer.js","Player.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["join","Login","SidebarOption","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Player","spotify","SpotifyWebApi","App","dispatch","user","token","useEffect","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","type","setAccessToken","getMe","then","getUserPlaylists","playlists","getPlaylist","response","discover_weekly","state","action","console","log","Boolean","hostname","match","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"ybA0BqB,UAxBO,yCAwBP,sBAtBJ,mCAsBI,yBAvBD,yBAuBC,kBArBN,CACX,8BACA,4BACA,2BACA,gBACA,8BAgBsGA,KAAK,OAA1F,yCCZNC,I,qDCFAC,ICNFC,EAAmBC,0BAEnBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAA1B,OACrB,kBAACL,EAAiBM,SAAlB,CAA2BC,MAAUC,qBAAWJ,EAASD,IAAzD,IAA6EE,IAIpEI,EAAoB,kBAAMC,qBAAWV,I,sGCInCW,ICTTC,EAAU,IAAIC,IAiELC,MA/Df,WAAe,MAGyBL,IAHzB,0BAGaM,GAHb,EAGFC,KAHE,EAGIC,MAHJ,MAKXC,qBAAU,WACN,IAAMC,ELDHC,OAAOC,SAASF,KAClBG,UAAU,GACVC,MAAM,KACNC,QAAO,SAACC,EAASC,GAEd,IAAIC,EAAQD,EAAKH,MAAM,KAEvB,OADAE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IACtCF,IACR,IKLHL,OAAOC,SAASF,KAAO,GACvB,IAAMU,EAASV,EAAKW,aAEhBD,IACAd,EAAS,CACLgB,KAAM,YACNd,MAAOY,IAKXjB,EAAQoB,eAAeH,GAEvBjB,EAAQqB,QAAQC,MAAK,SAAAlB,GAEjBD,EAAS,CACLgB,KAAM,WACNf,KAAMA,OAKdJ,EAAQuB,mBAAmBD,MAAK,SAACE,GAC7BrB,EAAS,CACLgB,KAAM,gBACNK,UAAWA,OAMnBxB,EAAQyB,YAAY,0BAA0BH,MAAK,SAACI,GAChDvB,EAAS,CACLgB,KAAM,sBACNQ,gBAAiBD,UAK9B,K,OCfQlC,EAhCC,SAACoC,EAAOC,GAKpB,OAJAC,QAAQC,IAAIF,GAIJA,EAAOV,MACX,IAAK,WAED,OAAO,2BACAS,GADP,IAEIxB,KAAMyB,EAAOzB,OAErB,IAAK,YACD,OAAO,2BACAwB,GADP,IAEIvB,MAAOwB,EAAOxB,QAEtB,IAAK,gBACD,OAAO,2BACAuB,GADP,IAEIJ,UAAWK,EAAOL,YAEtB,IAAK,sBACL,OAAO,2BACAI,GADP,IAEID,gBAAiBE,EAAOF,kBAEhC,QACI,OAAOC,IC1BCI,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,CAAW9C,aFXa,CACxBa,KAAM,KACNoB,UAAW,GACXc,SAAS,EACTxB,KAAM,MEOqCtB,QAAYA,GACvD,kBAAC,EAAD,QAGA+C,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.1c5deb4b.chunk.js","sourcesContent":["//https://developer.spotify.com/documentation/web-playback-sdk/quick-start5///#endregion\n\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"3f71259dab78462fbdec3f7da30f654c\";\nconst scopes = [\n    \"user-read-currently-playing\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-top-read\",\n    \"user-modify-playback-state\",\n];\n\n//Get the access token from the response\nexport const getTokenFromUrl = () => {\n    return window.location.hash\n        .substring(1)\n        .split('&')\n        .reduce((initial, item) => {\n            //#accessToken=mysupersecretkey&name=john&\n            let parts = item.split('=');\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n            return initial;\n        }, {});\n};\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;","import React from 'react';\nimport './Login.css';\nimport { loginUrl } from './spotify';\n\nfunction Login() {\n    return ( \n        <div className = 'login'>\n        <h1> I am the login page </h1>  \n        <img src = \"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt = \"\" / >\n        <a href = { loginUrl } > LOGIN WITH SPOTIFY </a>  \n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ title, Icon }) {\n    return ( \n        <div className = \"sidebarOption\"> \n        { Icon && <Icon className = \"sidebarOption__icon\"> </Icon> }  \n        { Icon ? <h4> { title } </h4> : <p> { title } </p> } \n        </div>\n    );\n}\n\nexport default SidebarOption;","import React, {\n    createContext,\n    useContext,\n    useReducer\n} from \"react\";\n\nexport const DataLayerContext = createContext();\n//children is the one which gets wrapped inside the datalayer => App\nexport const DataLayer = ({ initialState, reducer, children }) => ( \n    <DataLayerContext.Provider value = { useReducer(reducer, initialState) } > { children } \n    </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react';\nimport './Player.css';\nimport Sidebar from \"./Sidebar\";\nimport Body from \"./Body\";\nimport Footer from \"./Footer\";\n\nfunction Player({ spotify }) {\n    return ( \n        <div className = \"player\" >\n        <div className = \"player_body\" >\n        <Sidebar / >\n        <Body spotify={spotify} / >\n        </div>  \n        <Footer / >\n        </div > );\n}\n\nexport default Player;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport { getTokenFromUrl } from \"./spotify\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Player from \"./Player\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n    //const [token, setToken] = useState(null);\n    //Pass the functions to the datalayer and pull the details\n    const [{ user, token }, dispatch] = useDataLayerValue();\n    //Run code based on a given condition\n    useEffect(() => {\n        const hash = getTokenFromUrl();\n        //Strip the hash from the url to not show\n        window.location.hash = \"\";\n        const _token = hash.access_token;\n\n        if (_token) {\n            dispatch({\n                type: \"SET_TOKEN\",\n                token: _token\n            });\n            //setToken(_token);\n\n            //Store the access token from spotify app to this local react app to connect and use the spotify data\n            spotify.setAccessToken(_token);\n            //Get the logged in user details from the spotify api\n            spotify.getMe().then(user => {\n                //pop up into the datalayer wtih user and pulling the user from the datalayer\n                dispatch({\n                    type: 'SET_USER',\n                    user: user\n                });\n            });\n\n            //Give the playlists for the user\n            spotify.getUserPlaylists().then((playlists) => {\n                dispatch({\n                    type: 'SET_PLAYLISTS',\n                    playlists: playlists\n\n                });\n            });\n\n            //Get the weekly platylists\n            spotify.getPlaylist('37i9dQZEVXcMSQ4opYSmTT').then((response)=> {\n                dispatch({\n                    type: \"SET_DISCOVER_WEEKLY\",\n                    discover_weekly: response\n                });\n            });\n        }\n        //console.log('Token received from the spotify:', token);\n    }, []);\n    //console.log(\"user:\", user);\n    //console.log(\"token:\", token);\n    return (\n        //BEM\n        <div className = \"app\" > {\n            token ? ( < Player spotify = { spotify }\n                / > ) : ( <\n                Login / >\n            )\n        }\n\n        </div >\n    );\n}\n\nexport default App;","export const initialState = {\n    user: null,\n    playlists: [],\n    playing: false,\n    item: null,\n    //Remove after finished developing\n    //token: 'BQBVXN4xx42NePtdg-90NPkU4qaAs4Z3LwGioTd3pHIV4KDePeZViXJTgz4L9l74twrEDzvopeHMIpMzHo0tt5s098znahfuAVPqHkKZTaaPPvDhn01QE9JEzUJOKLNcxHHmbDeVDiCvktGH1FvgCRWEj86X'\n};\n\n//Reducer -> Listens to the data layer\nconst reducer = (state, action) => {\n    console.log(action);\n\n    //Dispatch the action and listens to the action\n    //Action -> type, [payload]\n    switch (action.type) {\n        case 'SET_USER':\n            //Listener\n            return {\n                ...state,\n                user: action.user\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token: action.token\n            };\n        case 'SET_PLAYLISTS':\n            return {\n                ...state,\n                playlists: action.playlists\n            };\n            case 'SET_DISCOVER_WEEKLY':\n            return {\n                ...state,\n                discover_weekly: action.discover_weekly\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { DataLayer } from \"./DataLayer\";\nimport reducer, { initialState } from \"./reducer\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( \n    <React.StrictMode>\n    <DataLayer initialState = { initialState } reducer = { reducer } >\n    <App />\n    </DataLayer> \n    </React.StrictMode > ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}